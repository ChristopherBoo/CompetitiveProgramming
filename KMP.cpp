#include <vector>
using namespace std;

/*
 * @param pattern: pattern string
 * @param patternLength: lengh of pattern string
 * 
 * call this before kmpSearch
 * 
 * @return kmp[i] = length of longest prefix of pattern that is a suffix of pattern[:i]
 */
void failure(char pattern[], int patternLength, int kmp[]) {
  int i = 0, j = -1; kmp[0] = -1;
  while (i < patternLength) {
    while (j >= 0 && pattern[i] != pattern[j])
      j = kmp[j];
    i++; j++;
    kmp[i] = j;
  }
}

/*
 * @param pattern: pattern string
 * @param     kmp: failure table generated by failuer()
 * @param    text: text string to find pattern
 *
 * @return res: placeholder for all starting index of pattern in text
 */
void kmpSearch(char pattern[], int patternLength, int kmp[], char text[], int textLength, vector<int>& res) {
  int i = 0, j = 0;
  while (i < textLength) {
    while (j >= 0 && text[i] != pattern[j])
      j = kmp[j];
    i++; j++;
    if (j == patternLength) {
      res.push_back(i - j);
      j = kmp[j];
    }
  } 
}
